#!/bin/bash 
# 
# Parses a list of files generated by Intel's Software Development Emulator (SDE) toolkit
# to determine floating-point operations and memory access counts

usage () {
  echo "usage: $0 [-v | --verbose] [-f | --function name] file1 file2 ..."
  exit 0
}

# Initial parameter values, default is to report global stats
search="EMIT_GLOBAL_DYNAMIC_STATS"
verbose=0

# Parse command line parameters
while [ "$#" -ge 1 ] ; do
  case "$1" in
    "-h" | "--help")           usage;;
    "-v" | "--verbose")        verbose=1; shift 1;;
    "-f" | "--function")       search=$2; shift 2;;
    *)                         break;;
  esac
done

# after parsing flags, make sure a file is specified
if [ $# -eq 0 ]; then
  usage
fi

# *elements_fp_single_1 thru 16
float_sum=([1]=0 [4]=0 [8]=0 [16]=0)
# *elements_fp_double_1 thru 8
double_sum=([1]=0 [2]=0 [4]=0 [8]=0)
# *mem-read-1 thru 64
read_sum=([1]=0 [2]=0 [4]=0 [8]=0 [16]=0 [32]=0 [64]=0)
# *mem-write-1 thru 64
write_sum=([1]=0 [2]=0 [4]=0 [8]=0 [16]=0 [32]=0 [64]=0)

echo "Search stanza is \"$search\""
file_list=$@
files_parsed=0
stanzas_parsed=0
for file in $file_list; do
  if [ -e $file ]; then
    exec < $file
    if [ $verbose -eq 1 ]; then echo "parsing $file"; fi
    (( files_parsed++ ))
  else
    echo "***WARNING***: $file doesn't exist"
    continue
  fi
  # scan through file until the search string is found
  while read var1 var2 var3 var4; do
    if [ -n "$var2" ]; then 
      # search for match, may be 2nd or 3rd entry in a line
      #if [ "$var2" == "$search" ] || [ "$var2" == "\$dynamic-counts-for-function:" ] && [ "$var3" == "$search" ]; then
      if [ "$var2" == "\$dynamic-counts-for-function:" ] && [ "$var3" == "$search" ] || [ "$var2" == "$search" ]; then
        if [ $verbose -eq 1 ]; then echo "$search found"; fi
        (( stanzas_parsed++ ))
        # start reading lines looking for key values
        while read var1 var2; do
          if [[ $var1 == *total ]]; then		# End of list
            break
          elif [[ $var1 == VFM* ]]; then		# Fused multiply add or subtract
            if   [[ $var1 == VFM*SS* ]]; then		# Scalar float
              (( float_sum[1] += $var2 ))
            elif [[ $var1 == VFM*PS*XMM* ]]; then	# SSE float
              (( float_sum[4] += $var2 ))
            elif [[ $var1 == VFM*PS*YMM* ]]; then 	# AVX or AVX2 float
              (( float_sum[8] += $var2 ))
            elif [[ $var1 == VFM*PS*ZMM* ]]; then	# AVX512 float
              (( float_sum[16] += $var2 ))
            elif   [[ $var1 == VFM*SD* ]]; then		# Scalar double
              (( double_sum[1] += $var2 ))
            elif [[ $var1 == VFM*PD*XMM* ]]; then	# SSE double
              (( double_sum[2] += $var2 ))
            elif [[ $var1 == VFM*PD*YMM* ]]; then 	# AVX or AVX2 double
              (( double_sum[4] += $var2 ))
            elif [[ $var1 == VFM*PD*ZMM* ]]; then	# AVX512 double
              (( double_sum[8] += $var2 ))
              echo $var1, $var2
            fi
          elif [[ $var1 == VFNM* ]]; then		# Fused multiply add or subtract
            if   [[ $var1 == VFNM*SS* ]]; then		# Scalar float
              (( float_sum[1] += $var2 ))
              echo $var1, $var2
            elif [[ $var1 == VFNM*PS*XMM* ]]; then	# SSE float
              (( float_sum[4] += $var2 ))
              echo $var1, $var2
            elif [[ $var1 == VFNM*PS*YMM* ]]; then 	# AVX or AVX2 float
              (( float_sum[8] += $var2 ))
              echo $var1, $var2
            elif [[ $var1 == VFNM*PS*ZMM* ]]; then	# AVX512 float
              (( float_sum[16] += $var2 ))
              echo $var1, $var2
            elif   [[ $var1 == VFNM*SD* ]]; then		# Scalar double
              (( double_sum[1] += $var2 ))
              echo $var1, $var2
            elif [[ $var1 == VFNM*PD*XMM* ]]; then	# SSE double
              (( double_sum[2] += $var2 ))
              echo $var1, $var2
            elif [[ $var1 == VFNM*PD*YMM* ]]; then 	# AVX or AVX2 double
              (( double_sum[4] += $var2 ))
              echo $var1, $var2
            elif [[ $var1 == VFNM*PD*ZMM* ]]; then	# AVX512 double
              (( double_sum[8] += $var2 ))
              echo $var1, $var2
            fi
          elif [[ $var1 == *elements_fp_* ]]; then
            case "$var1" in
            "*elements_fp_single_1")  (( float_sum[1] += $var2 ));;
            "*elements_fp_single_4")  (( float_sum[4] += $var2 ));;
            "*elements_fp_single_8")  (( float_sum[8] += $var2 ));;
            "*elements_fp_single_16") (( float_sum[16] += $var2 ));;
            "*elements_fp_double_1")  (( double_sum[1] += $var2 ));;
            "*elements_fp_double_2")  (( double_sum[2] += $var2 ));;
            "*elements_fp_double_4")  (( double_sum[4] += $var2 ));;
            "*elements_fp_double_8")  (( double_sum[8] += $var2 ));;
            esac
          elif [[ $var1 == *mem-read-* ]]; then
            case "$var1" in
            "*mem-read-1")            (( read_sum[1] += $var2 ));;
            "*mem-read-2")            (( read_sum[2] += $var2 ));;
            "*mem-read-4")            (( read_sum[4] += $var2 ));;
            "*mem-read-8")            (( read_sum[8] += $var2 ));;
            "*mem-read-16")           (( read_sum[16] += $var2 ));;
            "*mem-read-32")           (( read_sum[32] += $var2 ));;
            "*mem-read-64")           (( read_sum[64] += $var2 ));;
            esac
          elif [[ $var1 == *mem-write-* ]]; then
            case "$var1" in
            "*mem-write-1")           (( write_sum[1] += $var2 ));;
            "*mem-write-2")           (( write_sum[2] += $var2 ));;
            "*mem-write-4")           (( write_sum[4] += $var2 ));;
            "*mem-write-8")           (( write_sum[8] += $var2 ));;
            "*mem-write-16")          (( write_sum[16] += $var2 ));;
            "*mem-write-32")          (( write_sum[32] += $var2 ));;
            "*mem-write-64")          (( write_sum[64] += $var2 ));;
             esac
          fi
        done
      fi 
    fi
  done
done

if [ $verbose -eq 1 ]; then
  echo "Total files parsed = $files_parsed"
  echo "Total stanzas found = $stanzas_parsed"
fi

# print out FLOPs summary
total_float=0
total_double=0
for i in "${!float_sum[@]}"; do
  echo "elements_fp_single_${i} = ${float_sum[$i]}"
  (( total_float += (i * float_sum[i]) ))
done
for i in "${!double_sum[@]}"; do
  echo "elements_fp_double_${i} = ${double_sum[$i]}"
  (( total_double += (i * double_sum[i]) ))
done
echo "--->Total single-precision FLOPs = $total_float"
echo "--->Total double-precision FLOPs = $total_double"
echo "--->Total FLOPs = $(( total_float + total_double ))"

# print out memory access summary
total_read=0
total_write=0
for i in "${!read_sum[@]}"; do
  echo "mem-read-${i} = ${read_sum[$i]}"
  (( total_read += (i * read_sum[i]) ))
done
for i in "${!write_sum[@]}"; do
  echo "mem-write-${i} = ${write_sum[$i]}"
  (( total_write += (i * write_sum[i]) ))
done
echo "--->Total Bytes read = $total_read"
echo "--->Total Bytes written = $total_write"
echo "--->Total Bytes = $(( total_read + total_write ))"


